---
name: Release

"on":
  push:
    branches:
      - main

env:
  PY_VERSION: "3.10.10"

jobs:
  release:
    if: github.repository_owner == 'ernestomancebo'
    name: Release
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Adds python to runner
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          # Python version X processor architecture
          python-version: ${{ env.PY_VERSION }}
          architecture: "x64"
          cache: "pip"

      - name: Upgrade pip
        run: |
          python -m pip install --quiet --upgrade pip
          pip --version

      # TODO: Consider pyproject.toml
      - name: Install Poetry
        if: false
        run: |
          pip install --constraint=.github/workflows/poetry-constraints.txt poetry
          poetry --version

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "sha=$(git rev-parse --verify --quiet HEAD^)" >> $GITHUB_ENV

      # TODO: Consider pyproject.toml
      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@v2
        with:
          tag-template: "{VERSION}"
          version-command: |
            bash -o pipefail -c "poetry version | awk '{ print \$2 }'"

      # TODO: Consider pyproject.toml
      - name: Bump version for developmental release
        if: "! steps.check-version.outputs.tag"
        run: |
          poetry version patch &&
          version=$(poetry version | awk '{ print $2 }') &&
          poetry version $version.dev.$(date +%s)

      - name: Build package
        if: false
        run: |
          poetry build --ansi

      - name: Publish package on PyPI
        if: false
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish the release notes
        uses: release-drafter/release-drafter@v5
        with:
          publish: ${{ steps.check-version.outputs.tag != '' }}
          tag: ${{ steps.check-version.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
